SELECT 
    f.flight_number,
    TO_CHAR(f.departure_time, 'YYYY-MM-DD HH24:MI:SS') AS departure_time,
    p.name AS passenger_name,
    l.luggage_id,
    l.type AS luggage_type,
    l.check_in_status,
    l.lost_status
FROM 
    Flights f
    JOIN Bookings b ON f.flight_id = b.flight_id
    JOIN Passengers p ON b.passenger_id = p.passenger_id
    JOIN Luggage l ON b.booking_id = l.booking_id -- Ensure all luggage is linked to bookings correctly
WHERE 
    f.flight_id = '&flight_id'
ORDER BY 
    l.check_in_status DESC, l.lost_status;

BREAK ON REPORT
COMPUTE COUNT LABEL 'Total Luggage Items' OF luggage_id ON REPORT
COMPUTE COUNT LABEL 'Lost Items' OF luggage_id ON REPORT WHERE lost_status = 'Lost'

-- Summary Section
SELECT 
    'Summary' AS summary,
    COUNT(l.luggage_id) AS total_luggage_items,
    SUM(CASE WHEN l.lost_status = 'Lost' THEN 1 ELSE 0 END) AS lost_items_count,
    AVG(l.weight) AS avg_luggage_weight
FROM 
    Flights f
    JOIN Bookings b ON f.flight_id = b.flight_id
    JOIN Luggage l ON b.booking_id = l.booking_id
WHERE 
    f.flight_id = '&flight_id';

SELECT 
    f.flight_number,
    TO_CHAR(f.departure_time, 'YYYY-MM-DD HH24:MI:SS') AS departure_time,
    p.name AS passenger_name,
    ip.policy_type,
    ip.coverage_amount,
    ic.amount AS claim_amount,
    ic.status AS claim_status
FROM 
    Flights f
    JOIN Bookings b ON f.flight_id = b.flight_id
    JOIN Passengers p ON b.passenger_id = p.passenger_id
    LEFT JOIN Insurance_Claims ic ON b.booking_id = ic.booking_id
    LEFT JOIN Insurance_Policies ip ON ic.policy_id = ip.policy_id
WHERE 
    f.departure_time BETWEEN TO_DATE('&start_date', 'YYYY-MM-DD') AND TO_DATE('&end_date', 'YYYY-MM-DD')
ORDER BY 
    f.departure_time, p.name;

BREAK ON REPORT
COMPUTE SUM LABEL 'Total' OF coverage_amount claim_amount ON REPORT
COMPUTE COUNT LABEL 'Total Policies' OF policy_type ON REPORT
COMPUTE COUNT LABEL 'Total Claims' OF claim_amount ON REPORT

SELECT 
    'Summary' AS summary,
    COUNT(DISTINCT ip.policy_id) AS total_policies_sold,
    SUM(ip.coverage_amount) AS total_coverage_amount,
    COUNT(DISTINCT ic.claim_id) AS total_claims,
    SUM(ic.amount) AS total_claim_amount,
    AVG(ic.amount) AS avg_claim_amount
FROM 
    Flights f
    JOIN Bookings b ON f.flight_id = b.flight_id
    LEFT JOIN Insurance_Claims ic ON b.booking_id = ic.booking_id
    LEFT JOIN Insurance_Policies ip ON ic.policy_id = ip.policy_id
WHERE 
    f.departure_time BETWEEN TO_DATE('&start_date', 'YYYY-MM-DD') AND TO_DATE('&end_date', 'YYYY-MM-DD');


CREATE OR REPLACE PROCEDURE process_maintenance_task (
    p_airplane_id IN Airplanes.airplane_id%TYPE,
    p_maintenance_id IN Maintenance.maintenance_id%TYPE,
    p_part_id IN Maintenance_Parts.part_id%TYPE
) AS
    v_part_cost Maintenance_Parts.cost%TYPE;
    v_airplane_status Airplanes.status%TYPE;
BEGIN
    -- Check airplane status
    SELECT status INTO v_airplane_status
    FROM Airplanes
    WHERE airplane_id = p_airplane_id;

    IF v_airplane_status != 'Grounded' THEN
        RAISE_APPLICATION_ERROR(-20004, 'Airplane must be grounded for maintenance');
    END IF;

    -- Get part cost
    SELECT cost INTO v_part_cost
    FROM Maintenance_Parts
    WHERE part_id = p_part_id;

    -- Create maintenance task
    INSERT INTO Maintenance_Tasks (
        maintenance_task_id, maintenance_id, airplane_id, part_id, maintenance_date, status
    )
    VALUES (
        maintenance_task_seq.NEXTVAL, p_maintenance_id, p_airplane_id, p_part_id, SYSDATE, 'In Progress'
    );

    -- Update part status and replacement date
    UPDATE Maintenance_Parts
    SET status = 'In Use', replacement_date = SYSDATE
    WHERE part_id = p_part_id;

    -- Update airplane status to 'Maintenance' (shortened to fit within 12 characters)
    UPDATE Airplanes
    SET status = 'Maintenance'
    WHERE airplane_id = p_airplane_id;

    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20005, 'Invalid airplane, maintenance, or part ID');
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

CREATE OR REPLACE PROCEDURE process_insurance_claim (
    p_booking_id IN Bookings.booking_id%TYPE,
    p_claim_amount IN Insurance_Claims.amount%TYPE,
    p_claim_description IN VARCHAR2
) AS
    v_policy_id Insurance_Policies.policy_id%TYPE;
    v_coverage_amount Insurance_Policies.coverage_amount%TYPE;
    v_flight_id Flights.flight_id%TYPE;
    v_flight_status Flights.status%TYPE;

    -- Cursor to fetch policy and booking details
    CURSOR policy_cur IS
        SELECT ip.policy_id, ip.coverage_amount, b.flight_id
        FROM Bookings b
        JOIN Insurance_Policies ip ON b.booking_id = ip.policy_id
        WHERE b.booking_id = p_booking_id;

    v_policy_rec policy_cur%ROWTYPE;  -- Variable to hold cursor data
BEGIN
    -- Open cursor and fetch policy details
    OPEN policy_cur;
    FETCH policy_cur INTO v_policy_rec;
    IF policy_cur%NOTFOUND THEN
        CLOSE policy_cur;
        RAISE_APPLICATION_ERROR(-20008, 'Invalid booking ID or no associated insurance policy found');
    END IF;
    CLOSE policy_cur;

    -- Assign cursor output to variables
    v_policy_id := v_policy_rec.policy_id;
    v_coverage_amount := v_policy_rec.coverage_amount;
    v_flight_id := v_policy_rec.flight_id;

    -- Check flight status
    SELECT status INTO v_flight_status
    FROM Flights
    WHERE flight_id = v_flight_id;

    IF v_flight_status != 'Completed' THEN
        RAISE_APPLICATION_ERROR(-20006, 'Insurance claim can only be processed for completed flights');
    END IF;

    -- Validate claim amount
    IF p_claim_amount > v_coverage_amount THEN
        RAISE_APPLICATION_ERROR(-20007, 'Claim amount exceeds coverage amount');
    END IF;

    -- Create insurance claim
    INSERT INTO Insurance_Claims (
        claim_id, policy_id, booking_id, claim_date, amount, status
    ) VALUES (
        insurance_claim_seq.NEXTVAL, v_policy_id, p_booking_id, SYSDATE, p_claim_amount, 'Pending'
    );

    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20008, 'Invalid booking ID or no associated insurance policy found');
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER trg_manage_staff_workload
BEFORE INSERT ON Workload_Allocations
FOR EACH ROW
DECLARE
    v_staff_position VARCHAR2(30);
    v_flight_departure DATE;
    v_flight_arrival DATE;
    v_conflicting_allocations NUMBER;
    v_total_hours NUMBER;
    v_max_hours NUMBER := 40; -- Assume 40 hours per week max
BEGIN
    -- Get staff position
    SELECT position INTO v_staff_position
    FROM Staff
    WHERE staff_id = :NEW.staff_id;

    -- Get flight times
    SELECT departure_time, arrival_time
    INTO v_flight_departure, v_flight_arrival
    FROM Flights
    WHERE flight_id = :NEW.flight_id;

    -- Check for conflicting allocations
    SELECT COUNT(*)
    INTO v_conflicting_allocations
    FROM Workload_Allocations wa
    JOIN Flights f ON wa.flight_id = f.flight_id
    WHERE wa.staff_id = :NEW.staff_id
    AND f.departure_time < v_flight_arrival
    AND f.arrival_time > v_flight_departure;

    IF v_conflicting_allocations > 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Staff member already allocated to a conflicting flight.');
    END IF;

    -- Calculate total work hours for the week
    SELECT NVL(SUM((f.arrival_time - f.departure_time) * 24), 0)
    INTO v_total_hours
    FROM Workload_Allocations wa
    JOIN Flights f ON wa.flight_id = f.flight_id
    WHERE wa.staff_id = :NEW.staff_id
    AND f.departure_time BETWEEN TRUNC(SYSDATE, 'IW') AND TRUNC(SYSDATE, 'IW') + 7;

    v_total_hours := v_total_hours + ((v_flight_arrival - v_flight_departure) * 24);

    IF v_total_hours > v_max_hours THEN
        RAISE_APPLICATION_ERROR(-20003, 'Staff member would exceed maximum weekly hours.');
    END IF;

    -- Ensure proper staffing based on role
    IF v_staff_position = 'PILOT' AND :NEW.role != 'PILOT' THEN
        RAISE_APPLICATION_ERROR(-20004, 'Pilots can only be assigned as pilots.');
    ELSIF v_staff_position = 'FLIGHT_ATTENDANT' AND :NEW.role NOT IN ('ATTENDANT', 'LEAD_ATTENDANT') THEN
        RAISE_APPLICATION_ERROR(-20005, 'Flight attendants can only be assigned as attendants or lead attendants.');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_maintenance_scheduling
FOR INSERT OR UPDATE ON Maintenance_Tasks
COMPOUND TRIGGER

    -- Temporary storage for airplane IDs
    TYPE t_airplane_ids IS TABLE OF VARCHAR2(12) INDEX BY PLS_INTEGER;
    g_airplane_ids t_airplane_ids;
    g_idx PLS_INTEGER := 0;

    AFTER EACH ROW IS
    BEGIN
        IF :NEW.status = 'IN_PROGRESS' THEN
            g_idx := g_idx + 1;
            g_airplane_ids(g_idx) := :NEW.airplane_id;
        ELSIF :NEW.status = 'COMPLETED' THEN
            g_idx := g_idx + 1;
            g_airplane_ids(g_idx) := :NEW.airplane_id;
        END IF;
    END AFTER EACH ROW;

    AFTER STATEMENT IS
    BEGIN
        FOR i IN 1 .. g_idx LOOP
            -- Update airplane status based on maintenance task status
            DECLARE
                v_pending_tasks NUMBER;
            BEGIN
                SELECT COUNT(*)
                INTO v_pending_tasks
                FROM Maintenance_Tasks
                WHERE airplane_id = g_airplane_ids(i)
                AND status IN ('SCHEDULED', 'IN_PROGRESS');

                IF v_pending_tasks = 0 THEN
                    UPDATE Airplanes
                    SET status = 'AVAILABLE'
                    WHERE airplane_id = g_airplane_ids(i);

                    -- Reset flights if necessary
                    UPDATE Flights
                    SET status = 'SCHEDULED'
                    WHERE airplane_id = g_airplane_ids(i)
                    AND status = 'RESCHEDULED';
                ELSE
                    UPDATE Airplanes
                    SET status = 'MAINTENANCE'
                    WHERE airplane_id = g_airplane_ids(i);
                END IF;
            END;
        END LOOP;
    END AFTER STATEMENT;

END trg_maintenance_scheduling;
/

CREATE OR REPLACE PROCEDURE member_loyalty_report(
    p_start_date IN DATE,
    p_end_date IN DATE
) IS
    CURSOR member_cur IS
        SELECT m.member_id, m.name, m.total_trips,
               COUNT(b.booking_id) AS bookings_in_period
        FROM Members m
        LEFT JOIN Passengers p ON m.member_id = p.member_id
        LEFT JOIN Bookings b ON p.passenger_id = b.passenger_id
        WHERE b.booking_date BETWEEN p_start_date AND p_end_date
        GROUP BY m.member_id, m.name, m.total_trips
        ORDER BY bookings_in_period DESC;

    CURSOR booking_details_cur(p_member_id VARCHAR2) IS
        SELECT f.flight_number, f.origin, f.destination, b.booking_date
        FROM Bookings b
        JOIN Flights f ON b.flight_id = f.flight_id
        JOIN Passengers p ON b.passenger_id = p.passenger_id
        WHERE p.member_id = p_member_id
        AND b.booking_date BETWEEN p_start_date AND p_end_date;

    v_member_rec member_cur%ROWTYPE;
    v_booking_rec booking_details_cur%ROWTYPE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Member Loyalty and Booking Patterns Report');
    DBMS_OUTPUT.PUT_LINE('Period: ' || TO_CHAR(p_start_date, 'DD-MON-YYYY') || ' to ' || TO_CHAR(p_end_date, 'DD-MON-YYYY'));
    DBMS_OUTPUT.PUT_LINE('----------------------------------------------------');

    OPEN member_cur;
    LOOP
        FETCH member_cur INTO v_member_rec;
        EXIT WHEN member_cur%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Member: ' || v_member_rec.name || ' (ID: ' || v_member_rec.member_id || ')');
        DBMS_OUTPUT.PUT_LINE('Total Trips: ' || v_member_rec.total_trips);
        DBMS_OUTPUT.PUT_LINE('Bookings in Period: ' || v_member_rec.bookings_in_period);
        DBMS_OUTPUT.PUT_LINE('Recent Bookings:');

        OPEN booking_details_cur(v_member_rec.member_id);
        LOOP
            FETCH booking_details_cur INTO v_booking_rec;
            EXIT WHEN booking_details_cur%NOTFOUND;

            DBMS_OUTPUT.PUT_LINE('  ' || v_booking_rec.flight_number || ': ' || 
                                 v_booking_rec.origin || ' to ' || v_booking_rec.destination || 
                                 ' on ' || TO_CHAR(v_booking_rec.booking_date, 'DD-MON-YYYY'));
        END LOOP;
        CLOSE booking_details_cur;

        DBMS_OUTPUT.PUT_LINE('----------------------------------------------------');
    END LOOP;
    CLOSE member_cur;
END;
/

CREATE OR REPLACE PROCEDURE staff_workload_report IS
    CURSOR staff_cur IS
        SELECT s.staff_id, s.name, s.position, COUNT(wa.allocation_id) AS total_assignments
        FROM Staff s
        LEFT JOIN Workload_Allocations wa ON s.staff_id = wa.staff_id
        GROUP BY s.staff_id, s.name, s.position
        ORDER BY total_assignments DESC;

    CURSOR flight_assignments_cur(p_staff_id VARCHAR2) IS
        SELECT f.flight_number, f.origin, f.destination, wa.role
        FROM Workload_Allocations wa
        JOIN Flights f ON wa.flight_id = f.flight_id
        WHERE wa.staff_id = p_staff_id
        AND wa.allocation_date >= TRUNC(SYSDATE) - 30  -- Last 30 days
        ORDER BY f.departure_time;

    v_staff_rec staff_cur%ROWTYPE;
    v_assignment_rec flight_assignments_cur%ROWTYPE;
    v_assignment_count NUMBER;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Staff Workload and Flight Assignment Analysis');
    DBMS_OUTPUT.PUT_LINE('Period: Last 30 days');
    DBMS_OUTPUT.PUT_LINE('----------------------------------------------------');

    OPEN staff_cur;
    LOOP
        FETCH staff_cur INTO v_staff_rec;
        EXIT WHEN staff_cur%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Staff: ' || v_staff_rec.name || ' (ID: ' || v_staff_rec.staff_id || ')');
        DBMS_OUTPUT.PUT_LINE('Position: ' || v_staff_rec.position);
        DBMS_OUTPUT.PUT_LINE('Total Assignments: ' || v_staff_rec.total_assignments);
        DBMS_OUTPUT.PUT_LINE('Recent Flight Assignments:');

        v_assignment_count := 0;
        OPEN flight_assignments_cur(v_staff_rec.staff_id);
        LOOP
            FETCH flight_assignments_cur INTO v_assignment_rec;
            EXIT WHEN flight_assignments_cur%NOTFOUND OR v_assignment_count >= 5;

            DBMS_OUTPUT.PUT_LINE('  ' || v_assignment_rec.flight_number || ': ' || 
                                 v_assignment_rec.origin || ' to ' || v_assignment_rec.destination || 
                                 ' (' || v_assignment_rec.role || ')');
            v_assignment_count := v_assignment_count + 1;
        END LOOP;
        CLOSE flight_assignments_cur;

        DBMS_OUTPUT.PUT_LINE('----------------------------------------------------');
    END LOOP;
    CLOSE staff_cur;
END;
/

CREATE VIEW MemberFlightBookings AS
SELECT 
    m.member_id, 
    m.name AS member_name, 
    m.email AS member_email, 
    f.flight_number, 
    f.origin, 
    f.destination, 
    f.departure_time, 
    f.arrival_time, 
    f.status AS flight_status, 
    a.model AS airplane_model, 
    b.booking_date, 
    b.seat_number, 
    b.status AS booking_status
FROM 
    Members m
JOIN Passengers p ON m.member_id = p.member_id
JOIN Bookings b ON p.passenger_id = b.passenger_id
JOIN Flights f ON b.flight_id = f.flight_id
JOIN Airplanes a ON f.airplane_id = a.airplane_id;

CREATE TABLE InsertItems (
    item_id             CHAR(5),
    name                VARCHAR2(30),
    type                VARCHAR2(30),
    price               NUMBER,
    availability_status VARCHAR2(12),
    action_user         VARCHAR2(30),
    action_time         DATE,
    action_time_char    VARCHAR2(8)
);

CREATE TABLE UpdateItems (
    old_item_id             CHAR(5),
    old_name                VARCHAR2(30),
    new_name                VARCHAR2(30),
    old_type                VARCHAR2(30),
    new_type                VARCHAR2(30),
    old_price               NUMBER,
    new_price               NUMBER,
    old_availability_status VARCHAR2(12),
    new_availability_status VARCHAR2(12),
    action_user             VARCHAR2(30),
    action_time             DATE,
    action_time_char        VARCHAR2(8)
);

CREATE TABLE DeleteItems (
    item_id             CHAR(5),
    name                VARCHAR2(30),
    type                VARCHAR2(30),
    price               NUMBER,
    availability_status VARCHAR2(12),
    action_user         VARCHAR2(30),
    action_time         DATE,
    action_time_char    VARCHAR2(8)
);

CREATE OR REPLACE TRIGGER trg_track_Items
AFTER INSERT OR UPDATE OR DELETE ON Items
FOR EACH ROW
BEGIN
    CASE
        -- Track insert actions
        WHEN INSERTING THEN
            INSERT INTO InsertItems
            VALUES(:NEW.item_id, :NEW.name, :NEW.type, 
                   :NEW.price, :NEW.availability_status, 
                   USER, SYSDATE, TO_CHAR(SYSDATE, 'HH24:MI:SS'));

        -- Track update actions
        WHEN UPDATING THEN
            INSERT INTO UpdateItems
            VALUES(:OLD.item_id, :OLD.name, :NEW.name, 
                   :OLD.type, :NEW.type, 
                   :OLD.price, :NEW.price, 
                   :OLD.availability_status, :NEW.availability_status, 
                   USER, SYSDATE, TO_CHAR(SYSDATE, 'HH24:MI:SS'));
        
        -- Track delete actions
        WHEN DELETING THEN
            INSERT INTO DeleteItems
            VALUES(:OLD.item_id, :OLD.name, :OLD.type, 
                   :OLD.price, :OLD.availability_status, 
                   USER, SYSDATE, TO_CHAR(SYSDATE, 'HH24:MI:SS'));
    END CASE;
END;
/

INSERT INTO Items (item_id, name, type, price, availability_status)
VALUES ('I991', 'Laptop', 'Electronics', 1500, 'Available');

INSERT INTO Items (item_id, name, type, price, availability_status)
VALUES ('I992', 'Table', 'Furniture', 300, 'Out of Stock');

UPDATE Items
SET price = 1400, availability_status = 'Available'
WHERE item_id = 'I991';

DELETE FROM Items
WHERE item_id = 'I992';

SELECT * FROM InsertItems;
SELECT * FROM InsertItems;
SELECT * FROM DeleteItems;
